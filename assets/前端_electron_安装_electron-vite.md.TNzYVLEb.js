import{_ as a,c as e,o as i,a4 as s}from"./chunks/framework.4aTu-Nia.js";const E=JSON.parse('{"title":"electron-vite","description":"","frontmatter":{},"headers":[],"relativePath":"前端/electron/安装/electron-vite.md","filePath":"前端/electron/安装/electron-vite.md","lastUpdated":1718349216000}'),t={name:"前端/electron/安装/electron-vite.md"},l=s(`<h1 id="electron-vite" tabindex="-1">electron-vite <a class="header-anchor" href="#electron-vite" aria-label="Permalink to &quot;electron-vite&quot;">​</a></h1><p><strong>在上面的文章大概介绍了<code>electron</code>的原理,本次我们选用一个成熟的<code>electron脚手架</code>来做入门的demo项目</strong></p><h2 id="项目地址" tabindex="-1">项目地址 <a class="header-anchor" href="#项目地址" aria-label="Permalink to &quot;项目地址&quot;">​</a></h2><p><a href="https://cn.electron-vite.org/" target="_blank" rel="noreferrer">electron-vite</a></p><p><img src="https://gitee.com/zhaox010/pic-go-save/raw/master/image/202406141423832.png" alt="image-20240614142258670"></p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p><strong>electron-vite</strong> 是一个新型构建工具，旨在为 <a href="https://www.electronjs.org/" target="_blank" rel="noreferrer">Electron</a> 提供更快、更精简的开发体验。它主要由五部分组成：</p><ul><li>一套构建指令，它使用 <a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">Vite</a> 打包你的代码，并且它能够处理 Electron 的独特环境，包括 <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> 和浏览器环境。</li><li>集中配置主进程、渲染器和预加载脚本的 Vite 配置，并针对 Electron 的独特环境进行预配置。</li><li>为渲染器提供快速模块热替换（HMR）支持，为主进程和预加载脚本提供热重载支持，极大地提高了开发效率。</li><li>优化 Electron 主进程资源处理。</li><li>使用 V8 字节码保护源代码。</li></ul><p>electron-vite 快速、简单且功能强大，旨在开箱即用。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-pow vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">pow</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm create @quick-start/electron@latest</span></span></code></pre></div><ul><li>选择项目的名称</li><li>选择<code>react</code>还是<code>vue</code></li><li>是否启用typescript</li><li>electron自动更新插件</li><li>开启electron下载代理</li></ul><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">✔ Project name: … </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">✔ Select a framework: › vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">✔ Add TypeScript? … No </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Yes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">✔ Add Electron updater plugin? … No </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Yes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">✔ Enable Electron download mirror proxy? … No </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Scaffolding project </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Done.</span></span></code></pre></div><h2 id="下载失败" tabindex="-1">下载失败 <a class="header-anchor" href="#下载失败" aria-label="Permalink to &quot;下载失败&quot;">​</a></h2><p>在其中有一些小伙伴可能会遇到一些安装失败的问题</p><ul><li>如果可以挂代理 请挂上代理再安装依赖</li><li>如果还是不可以 可以单独配置electron的代理</li></ul><h3 id="打开npm的配置文件" tabindex="-1">打开npm的配置文件 <a class="header-anchor" href="#打开npm的配置文件" aria-label="Permalink to &quot;打开npm的配置文件&quot;">​</a></h3><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm config edit</span></span></code></pre></div><h3 id="设置electron的代理" tabindex="-1">设置electron的代理 <a class="header-anchor" href="#设置electron的代理" aria-label="Permalink to &quot;设置electron的代理&quot;">​</a></h3><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=https://registry.npmmirror.com</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">electron_mirror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=https://cdn.npmmirror.com/binaries/electron/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">electron_builder_binaries_mirror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=https://npmmirror.com/mirrors/electron-builder-binaries/</span></span></code></pre></div><h3 id="清除缓存" tabindex="-1">清除缓存 <a class="header-anchor" href="#清除缓存" aria-label="Permalink to &quot;清除缓存&quot;">​</a></h3><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">clean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">force</span></span></code></pre></div><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h2><p><img src="https://gitee.com/zhaox010/pic-go-save/raw/master/image/202406141503388.png" alt="image-20240614150319366"></p><p><img src="https://gitee.com/zhaox010/pic-go-save/raw/master/image/202406141510683.png" alt="image-20240614151045659"></p><h3 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-label="Permalink to &quot;main&quot;">​</a></h3><p>electron主进程</p><h3 id="preload" tabindex="-1">preload <a class="header-anchor" href="#preload" aria-label="Permalink to &quot;preload&quot;">​</a></h3><p>渲染进程和主进程通信使用</p><h3 id="renderer" tabindex="-1">renderer <a class="header-anchor" href="#renderer" aria-label="Permalink to &quot;renderer&quot;">​</a></h3><p>渲染进程 存放我们的vue页面或者react页面</p>`,31),n=[l];function r(h,p,o,c,d,k){return i(),e("div",null,n)}const m=a(t,[["render",r]]);export{E as __pageData,m as default};
